// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  walletAddress String?

  accounts  Account[]
  sessions  Session[]
  inventory Inventory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inventory {
  id                   String       @id @default(cuid())
  inventoryName        String?
  inventoryWebsiteUri  String?
  inventoryImageUri    String?
  inventoryDescription String?
  inventoryPlatform    String?
  inventoryAttributes  Attributes[]

  adSlots AdSlot[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([inventoryName])
  @@index([userId])
}

model Attributes {
  id String @id @default(cuid())

  key         String?
  value       String?
  Inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?
}

model AdSlot {
  id              String  @id @default(cuid())
  slotName        String?
  slotDescription String?
  slotLength      String?
  slotWidth       String?
  slotWebsiteUri  String?
  slotImageUri    String?

  lent         Boolean?
  mintAddress  String?
  ownerAddress String?
  ownerEmail   String?

  // // attribute 1
  // displayUri  String?
  // // attribute 2
  // redirectUri String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String
}

// model SlotAttributes {
//   id String @id @default(cuid())

//   key      String?
//   value    String?
//   adSlot   AdSlot? @relation(fields: [adSlotId], references: [id])
//   adSlotId String?
// }
